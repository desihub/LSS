'''Original version written by Anand Raichoor'''#!/usr/bin/env python# need to run before:# source /global/cfs/cdirs/desi/software/desi_environment.sh masterimport matplotlibmatplotlib.use('Agg')import osimport numpy as npimport subprocessimport astropy.io.fits as fitsimport fitsioimport globimport matplotlib.pyplot as pltfrom matplotlib import gridspecimport globfrom argparse import ArgumentParser# reading argumentsparser = ArgumentParser()## generalparser.add_argument('--rootdir',      help='root directory; all other paths are relative to that',type=str,default=None,metavar='ROOTDIR')parser.add_argument('--obsconds',     help='observing conditions (e.g.: dark,gray)',              type=str,default=None,metavar='OBSCONDS')parser.add_argument('--radec'  ,      help='radec boundaries for tile centres (e.g.: 0,200,0,30)',type=str,default=None,metavar='RADEC')parser.add_argument('--rundate',      help='rundate for focalplane (default=2020-01-01T00:00:00)',type=str,default='2020-01-01T00:00:00',metavar='RUNDATE')   parser.add_argument('--dr',           help='legacypipe dr (e.g. dr8)',                            type=str,default=None,metavar='DR')parser.add_argument('--dtver',        help='desitarget version (e.g. 0.39.0)',                    type=str,default=None,metavar='DTVER')## randomsparser.add_argument('--randdens',     help='random density (/deg2)',                              type=str,default=None,metavar='RANDDENS')parser.add_argument('--priority_init',help='priority_init for rand',                              type=str,default=None,metavar='PRIORITY_INIT')parser.add_argument('--numobs_init',  help='numobs_init for rand',                                type=str,default=None,metavar='NUMOBS_INIT')## targets + lya dealingparser.add_argument('--desi_target',  help='desi_target (bitwise) for science/rand (e.g.: 0,1,2)',type=str,default=None, metavar='DESI_TARGET')parser.add_argument('--lyafrac',      help='fraction of qso which are lya (0.20 is reasonable)',  type=str,default='0.0',metavar='LYAFRAC')parser.add_argument('--updatelya',    help='update numobs_more with islya? (0,1)',                type=str,default='0',  metavar='UPDATELYA')#args   = parser.parse_args()for kwargs in args._get_kwargs():    print(kwargs)# safeif (args.rootdir[-1]!='/'): args.rootdir += '/'#----------------------------------# rootdirif (os.path.isdir(args.rootdir)==False):	os.mkdir(args.rootdir)# subdirsfor subdir in ['inputs','science-fa','rands-fa','outputs','logs','diagnosis']:	if (os.path.isdir(args.rootdir+subdir)==False):		os.mkdir(args.rootdir+subdir)# saving settingsfn = open(args.rootdir+'settings.asc','w')for kwargs in args._get_kwargs():	fn.write(kwargs[0]+'\t= '+str(kwargs[1])+'\n')fn.write('\n')fn.write('python desi_fa_master.py '+' '.join(['--'+kwargs[0]+' '+str(kwargs[1]) for kwargs in args._get_kwargs() if kwargs[1] is not None])+'\n')fn.write('\n')fn.close()#----------------------------------#----------------------------------for sample in ['tiles','science','std','sky']:#,'random']:	fn = open(args.rootdir+'logs/desi_fa_input-'+sample+'.log','w')	# science randoms?	if ((sample=='random') & (args.randdens is not None)):		tmparr = [os.getenv('HOME')+'/Scripts/desi_fa_input.py',					'--targ',         'rand',					'--randdens',     args.randdens,					'--priority_init',args.priority_init,					'--numobs_init',  args.numobs_init]	# science targs, std, sky	else:		tmparr = [os.getenv('HOME')+'/Scripts/desi_fa_input.py',					'--targ',         sample]	tmparr    += [	'--radec',        args.radec,					'--obsconds',     args.obsconds,					'--dr',           args.dr,					'--dtver',        args.dtver,					'--outfits',      args.rootdir+'inputs/'+sample+'.fits',					'--desi_target',  args.desi_target]	# lya?	if (sample=='science'):		tmparr += [	'--lyafrac',      args.lyafrac]	print(tmparr)	p = subprocess.call(tmparr, stdout=fn)fn.close()#----------------------------------#----------------------------------# running fapassids = [fn.split('/')[-1][10] for fn in np.sort(glob.glob(args.rootdir+'inputs/tiles-pass?.fits'))]print('passids = ',passids)for passid in passids:	fn = open(args.rootdir+'logs/desi_fa_run-pass'+passid+'.log','w')	if (passid==passids[0]):		input_science = 'inputs/science.fits'	else:		input_science = 'outputs/science-after-pass'+str(int(passid)-1)+'.fits'	output_science = 'science-after-pass'+passid+'.fits'	tmparr = [os.getenv('HOME')+'/Scripts/desi_fa_run.py',					'--rootdir',      args.rootdir,					'--passid',       passid,					'--input',        input_science,					'--std',          'inputs/std.fits',					'--sky',          'inputs/sky.fits',					'--output',       'outputs/'+output_science,					'--fadir',        'science-fa/fiberassign-pass'+passid,					'--updatelya',    args.updatelya,					'--rundate',      args.rundate]	print(tmparr)	p = subprocess.call(tmparr, stdout=fn)	fn.close()#----------------------------------#----------------------------------# stats/plotsramin,ramax,decmin,decmax = [float(x) for x in args.radec.split(',')]passids = [fn.split('/')[-1][10] for fn in np.sort(glob.glob(args.rootdir+'inputs/tiles-pass?.fits'))]ps      = [int(passid) for passid in passids]nobss   = [0,1,2,3,4]# sciencetargs   = ['lrg','elg','qso-tracer','qso-lya']numobs_inits = [1,1,1,4]for foot in ['foot_and','foot_or']:	fn      = open(args.rootdir+'diagnosis/summary-science-'+foot+'.asc','w')	for targ,numobs_init in zip(targs,numobs_inits):	#for targ,numobs_init in zip(['qso-lya'],[1]):		#		fn.write('#------\n')		fn.write('fraction for '+targ+' in '+foot+'\n')		fn.write('# pass\t\t'+' '.join(['nobs'+str(p) for p in ps])+'\n')		#		fig     = plt.figure(figsize=(30,5*len(passids)))		gs      = gridspec.GridSpec(len(passids),len(nobss),wspace=0.30,hspace=0.40)		for ix,p in enumerate(ps):			#			p_str = '+'.join([str(pp) for pp in ps if pp<=p])			#			d = fits.open(args.rootdir+'outputs/science-after-pass'+str(p)+'.fits')[1].data			if   (targ=='lrg'):        d = d[( d['desi_target'] & 2**0)>0]			elif (targ=='elg'):        d = d[( d['desi_target'] & 2**1)>0]			elif (targ=='qso-tracer'): d = d[((d['desi_target'] & 2**2)>0) & (~d['islya'])]			else:                      d = d[((d['desi_target'] & 2**2)>0) & ( d['islya'])]			# nobs_done			#nobs_done      = d['numobs_init'] - d['numobs_more']			### special treatment for already observed qso-tracer,			###   whose numobs_more have been tweaked..			#tmp            = ((d['desi_target'] & 2**2)>0) & (~d['islya']) & (d['assignbit']>0)			#nobs_done[tmp] = 1 - d['numobs_more'][tmp]			nobs_done = d['ar_numobs_done'][:,:p+1].sum(axis=1)			# looping on nobs			fracs = []			tmpn  = 0			for iy,nobs in enumerate(nobss):				# considered targets				if (foot=='foot_or'):					sel = np.ones(len(d),dtype=bool)				else:					sel = np.ones(len(d),dtype=bool)					for pp in ps::q						if (pp<=p):							sel &= ((d['passbit'] & 2**pp)>0)				nsel   = sel.sum()				# considered targets with nobs				selfa  = (sel) & (nobs_done==nobs)				nselfa = selfa.sum()				tmpn += nselfa				fracs += ['%.2f'%(nselfa/float(nsel))]				# plot				if (nselfa==0): alpha = 1				else:           alpha = np.clip(0.1 / (nselfa/10000.),0.002,1)				ax = plt.subplot(gs[ix,iy])				ax.scatter(d['ra'][selfa],d['dec'][selfa],c='k',s=3,alpha=alpha,rasterized=True)				ax.set_title(targ+' pass='+p_str+' nobs='+str(nobs)+'\n'+						str(nselfa)+' / '+str(nsel)+' = '+'%.2f'%(nselfa/float(nsel)),						fontsize=15)				ax.set_xlabel('R.A. [deg]')				ax.set_ylabel('Dec. [deg]')				ax.set_xlim(ramax +2,ramin -2)				ax.set_ylim(decmin-2,decmax+2)				ax.grid(True)				if ((ix==len(ps)-1) & (iy==len(nobss)-1)):					ax.text(1.0,-0.3,args.rootdir,  color='r',fontsize=20,ha='right',transform=ax.transAxes)					ax.text(1.0,-0.4,'foot = '+foot,color='r',fontsize=20,ha='right',transform=ax.transAxes)				if ((ix==0) & (iy==0)):					arrow_args = dict(color='k',width=2,headwidth=20,headlength=30)					ax.annotate('',xy=(0.06,0.05),xytext=(0.06,0.97),xycoords='figure fraction',arrowprops=arrow_args)					ax.text(0.08,0.5,'NPASS', fontsize=20,fontweight='bold',va='center',rotation='vertical',transform=fig.transFigure)					ax.annotate('',xy=(0.95,0.95),xytext=(0.05,0.95),xycoords='figure fraction',arrowprops=arrow_args)					ax.text(0.5,0.94,'NOBS',fontsize=20,fontweight='bold',ha='center',transform=fig.transFigure)			#			#print(foot,targ,p,tmpn,nsel,np.unique(nobs_done,return_counts=True))			fn.write(p_str+'\t\t'+'\t'.join(fracs)+'\n')		plt.savefig(args.rootdir+'diagnosis/'+targ+'-'+foot+'.png',bbox_inches='tight')		plt.close()	fn.close()	subprocess.call('cat '+args.rootdir+'diagnosis/summary-science-'+foot+'.asc', shell=True)	# std/skyfoot    = 'or'fn      = open(args.rootdir+'diagnosis/summary-std-sky.asc','w')percs   = [0,25,50,75,100]fig     = plt.figure(figsize=(10,5*len(passids)))gs      = gridspec.GridSpec(len(passids),2,wspace=0.30,hspace=0.40)for iy,sample,alpha in zip([0,1,],['std','sky'],[0.1,0.025]):	#	fn.write('#------\n')	fn.write('number of '+sample+' fibres per tile'+'\n')	fn.write('# pass\t\t'+' \t'.join([str(perc)+'%' for perc in percs])+'\n')	#	for ix,p in enumerate(ps):		#		d = fitsio.read(args.rootdir+'science-fa/fiberassign-pass'+str(p)+'/fiberassign-'+sample+'.fits',columns=['target_ra','target_dec','tileid'],lower=True)		_,nfibres = np.unique(d['tileid'],return_counts=True)		ax = plt.subplot(gs[ix,iy])		ax.scatter(d['target_ra'],d['target_dec'],c='k',s=3,alpha=alpha,rasterized=True)		ax.set_title(sample+' pass='+str(p)+'\n'+				'-'.join(['%.0f'%n for n in np.percentile(nfibres,percs)]),				fontsize=15)		ax.set_xlabel('R.A. [deg]')		ax.set_ylabel('Dec. [deg]')		ax.set_xlim(ramax +2,ramin -2)		ax.set_ylim(decmin-2,decmax+2)		ax.grid(True)		fn.write(str(p)+'\t\t'+'\t'.join(['%.0f'%n for n in np.percentile(nfibres,percs)])+'\n')		#		if (ix==0):			ax.text(0.5,1.3,sample.upper(),fontsize=20,fontweight='bold',ha='center',transform=ax.transAxes)		if ((ix==len(ps)-1) & (iy==1)):			ax.text(1.0,-0.3,args.rootdir,  color='r',fontsize=15,ha='right',transform=ax.transAxes)			ax.text(1.0,-0.4,'reported N per tile :'+'-'.join([str(perc)+'%' for perc in percs]),color='r',fontsize=15,ha='right',transform=ax.transAxes)#arrow_args = dict(color='k',width=2,headwidth=20,headlength=30)ax.annotate('',xy=(0.05,0.05),xytext=(0.05,0.97),xycoords='figure fraction',arrowprops=arrow_args)ax.text(0.03,0.5,'PASS', fontsize=20,fontweight='bold',va='center',rotation='vertical',transform=fig.transFigure)plt.savefig(args.rootdir+'diagnosis/std-sky-'+foot+'.png',bbox_inches='tight')plt.close()#fn.close()subprocess.call('cat '+args.rootdir+'diagnosis/summary-std-sky.asc', shell=True)#'''# Nfibres vs. Ntargetscs = ['k','b','g','y','r','c','pink','orange'][:len(passids)]fig,ax = plt.subplots()for passid,c in zip(passids,cs):	# reachable targets with numobs_more>0	targ    = fits.open(args.rootdir+'science-fa/fiberassign-pass'+passid+'/fiberassign-targets.fits')[1].data	targ    = targ[targ['numobs_more']>0]	# assign targets	sky     = fits.open(args.rootdir+'science-fa/fiberassign-pass'+passid+'/fiberassign-sky.fits')[1].data	ntarg,nsky = [],[]	for tileid in np.unique(targ['tileid']):		ntarg    += [(targ   ['tileid']==tileid).sum()]		nsky     += [(sky    ['tileid']==tileid).sum()]	ax.scatter(ntarg,nsky,s=5,c=c,marker='o',alpha=0.5,label='pass = '+passid)ax.set_title(args.rootdir.split('/')[-2])ax.set_xlabel('N_reachable_targets with NUMOBS_MORE>0 per tile')ax.set_ylabel('N_sky_fibres per tile')ax.grid(True)ax.legend()plt.savefig(args.rootdir+'diagnosis/nskyfibres-ntargets.png',bbox_inches='tight')plt.close()#----------------------------------